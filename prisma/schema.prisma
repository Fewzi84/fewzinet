// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id String @id
  username String @unique
  cover String?
  avator  String?
  name String?
  surname String?
  description String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  likes Like[]
  comments Comment[]
  followers Follow[]  @relation("userFollower" )
  followings Follow[]  @relation("userFollowing")
  followrequestSent FollowRequest[] @relation("requestSender")
  followrequestRecived FollowRequest[] @relation("requestReciver")
  blocker Block? @relation("userBlocker")
  bloackedBy Block? @relation("userBlocked")
  stories Story[]

}
model Post{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  description String 
  updatedAt DateTime @updatedAt
  image String?
  user User @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId String
  likes Like[]
  comments Comment[]
}
model Like{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  post Post? @relation(fields: [postId], references: [id] , onDelete: Cascade)
  postId Int?
  user User  @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId String
  comment Comment? @relation(fields: [commentId], references: [id] , onDelete: Cascade)
  commentId Int?
}
model Comment{
  id Int @id @default(autoincrement())
  description String 
  crearedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId] ,references: [id] , onDelete: Cascade)
  userId String
  likes Like[]
  post Post @relation(fields: [postId], references: [id] , onDelete: Cascade)
  postId Int
  
}
model Follow {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  follower User @relation("userFollower",fields: [followerID],references: [id] , onDelete: Cascade )
  followerID String
  following User @relation("userFollowing",fields: [followingId], references: [id] ,onDelete: Cascade)
  followingId String 
}
model FollowRequest {
  id Int @id @default(autoincrement())
  sender User @relation("requestSender", fields: [senderId], references: [id] , onDelete: Cascade)
  senderId String
  reciver User @relation("requestReciver", fields: [reciverId],references: [id] , onDelete: Cascade)
  reciverId String
  @@unique([senderId, reciverId])
  

}
model Block {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker User @relation("userBlocker",fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String @unique
  bloked User @relation("userBlocked" ,fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String @unique
  @@unique([blockerId, blockedId])
}
model Story {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  expireAt DateTime 
  img String
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  userId String
}